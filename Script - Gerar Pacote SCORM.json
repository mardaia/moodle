{"files":[{"id":"cdb6ce56-6f04-4445-89e8-4691f1d15e38","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Manaus\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Docs\",\n        \"version\": \"v1\",\n        \"serviceId\": \"docs\"\n      },\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v3\",\n        \"serviceId\": \"drive\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"7f2aec40-60ff-4d62-9509-a415e9371e67","name":"Código","type":"server_js","source":"function converterParaGoogleDocs() {\n  const pastaOrigemId \u003d \"14YXmMPCPFHK5obQ_S0bjaB5soqm1xdSC\"; // Substitua pelo ID da pasta de origem\n  const pastaDestinoId \u003d \"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\"; // Substitua pelo ID da pasta de destino\n\n  const pastaOrigem \u003d DriveApp.getFolderById(pastaOrigemId);\n  const pastaDestino \u003d DriveApp.getFolderById(pastaDestinoId);\n\n  Logger.log(`Iniciando processamento da pasta: ${pastaOrigem.getName()}`);\n  processarPastaParaGoogleDocs(pastaOrigem, pastaDestino);\n}\n\nfunction processarPastaParaGoogleDocs(pastaOrigem, pastaDestino) {\n  Logger.log(`Processando pasta: ${pastaOrigem.getName()}`);\n\n  if (pastaOrigem.getName().includes(\"1.10- Videoaulas\")) {\n    Logger.log(`Ignorando pasta: ${pastaOrigem.getName()}`);\n    return;\n  }\n\n  const arquivos \u003d pastaOrigem.getFiles();\n  while (arquivos.hasNext()) {\n    const arquivo \u003d arquivos.next();\n    Logger.log(`Tentando processar arquivo: ${arquivo.getName()}, Tipo: ${arquivo.getMimeType()}`);\n\n    try {\n      if (\n        arquivo.getMimeType() \u003d\u003d\u003d \"application/msword\" || \n        arquivo.getMimeType() \u003d\u003d\u003d MimeType.MICROSOFT_WORD\n      ) {\n        Logger.log(`Convertendo arquivo para Google Docs: ${arquivo.getName()}`);\n        converterParaGoogleDocsUnico(arquivo, pastaDestino);\n      } else if (\n        arquivo.getMimeType() \u003d\u003d\u003d MimeType.PNG ||\n        arquivo.getMimeType() \u003d\u003d\u003d MimeType.JPEG ||\n        arquivo.getMimeType() \u003d\u003d\u003d MimeType.GIF\n      ) {\n        Logger.log(`Gerando HTML para imagem: ${arquivo.getName()}`);\n        gerarHtmlImagem(arquivo, pastaDestino);\n      } else if (arquivo.getMimeType() \u003d\u003d\u003d MimeType.GOOGLE_DOCS) {\n        Logger.log(`Convertendo Google Docs para HTML: ${arquivo.getName()}`);\n        converterDocParaHtml(arquivo, pastaDestino);\n      } else {\n        Logger.log(`Arquivo ignorado: ${arquivo.getName()} (tipo: ${arquivo.getMimeType()})`);\n      }\n    } catch (e) {\n      Logger.log(`Erro ao processar arquivo ${arquivo.getName()}: ${e.message}`);\n    }\n  }\n\n  const subpastas \u003d pastaOrigem.getFolders();\n  while (subpastas.hasNext()) {\n    const subpastaOrigem \u003d subpastas.next();\n    const subpastaDestinoExistente \u003d pastaDestino.getFoldersByName(subpastaOrigem.getName());\n    const subpastaDestino \u003d subpastaDestinoExistente.hasNext()\n      ? subpastaDestinoExistente.next()\n      : pastaDestino.createFolder(subpastaOrigem.getName());\n\n    processarPastaParaGoogleDocs(subpastaOrigem, subpastaDestino);\n  }\n}\n\nfunction converterParaGoogleDocsUnico(arquivo, pastaDestino) {\n  try {\n    const blob \u003d arquivo.getBlob();\n    const requestBody \u003d {\n      name: arquivo.getName().replace(/\\.[^/.]+$/, \"\"), // Nome sem extensão\n      mimeType: MimeType.GOOGLE_DOCS,\n      parents: [pastaDestino.getId()]\n    };\n\n    const novoArquivo \u003d Drive.Files.create(requestBody, blob);\n    Logger.log(`Arquivo convertido para Google Docs: ${novoArquivo.name}, ID: ${novoArquivo.id}`);\n  } catch (e) {\n    Logger.log(`Erro ao converter para Google Docs ${arquivo.getName()}: ${e.message}`);\n  }\n}\n\nfunction gerarHtmlImagem(arquivo, pastaDestino) {\n    try {\n      // Gera a URL incorporada para a imagem\n      const url \u003d `https://drive.google.com/file/d/${arquivo.getId()}/preview`;\n  \n      // Cria o conteúdo HTML com o título fixo \"Mapa Mental\" e estilos personalizados\n      const embedHtml \u003d `\n        \u003c!DOCTYPE html\u003e\n        \u003chtml lang\u003d\"pt-BR\"\u003e\n          \u003chead\u003e\n            \u003cmeta charset\u003d\"UTF-8\"\u003e\n            \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e\n            \u003ctitle\u003eMapa Mental\u003c/title\u003e\n            \u003cstyle\u003e\n              body {\n                \u003clink href\u003d\"https://fonts.googleapis.com/css2?family\u003dPoppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026display\u003dswap\" rel\u003d\"stylesheet\"\u003e\n                font-size: 2.6vh;\n                font-family: \u0027Poppins\u0027, sans-serif;\n                background-color: #ffffff;\n                color: #003366;\n                margin: 0;\n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n              }\n              .main-content {\n                height: 100%;\n                padding: 20px;\n                overflow-y: auto; /* Habilita rolagem vertical */\n              }\n              iframe {\n                border: none;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                border-radius: 8px;\n              }\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n\n          \u003cdiv class\u003d\"main-content\"\u003e\n              \u003ch1 class\u003d\"text-center\" id\u003d\"item-1\" style\u003d\"background-color: #00264d; color: #ffffff; padding: 10px; padding-left: 9%; border-radius: 5px; position: relative;\"\u003e\n                \u003cimg src\u003d\"https://eadniltonlins.com.br/imagens/pos-graduacao/mapa-mental.png\" \n                     class\u003d\"img-fluid mb-4\" \n                     style\u003d\"border-radius: 5px; position: absolute; top: 50%; left: 5%; transform: translate(-50%, -50%); max-height: 350px; height: auto; width: auto;\" \n                     alt\u003d\"Ícone\"\u003e\n                Mapa Mental\n              \u003c/h1\u003e\n              \u003cdiv style\u003d\"display: flex; justify-content: center; align-items: center; flex-direction: column;\"\u003e\n                \u003ciframe src\u003d\"${url}\" width\u003d\"800\" height\u003d\"600\" allowfullscreen\u003e\u003c/iframe\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n          \u003c/body\u003e\n        \u003c/html\u003e\n      `;\n  \n      // Cria o arquivo HTML na pasta de destino\n      const novoArquivoHtml \u003d pastaDestino.createFile(`${arquivo.getName()}.html`, embedHtml, MimeType.HTML);\n      Logger.log(`Arquivo HTML gerado com título \"Mapa Mental\": ${novoArquivoHtml.getName()} na pasta ${pastaDestino.getName()}`);\n    } catch (e) {\n      Logger.log(`Erro ao gerar HTML com título \"Mapa Mental\" para imagem ${arquivo.getName()}: ${e.message}`);\n    }\n  }\n\n\n\n//Fim da função Gerar Html Imagem Mapa Mental\n\nfunction converterDocsParaHtml() {\n  // ID da pasta de destino (contendo os arquivos Google Docs gerados)\n  const pastaDestinoId \u003d \"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\"; // Substitua pelo ID da pasta de destino\n\n  const pastaDestino \u003d DriveApp.getFolderById(pastaDestinoId);\n\n  Logger.log(`Iniciando processamento da pasta: ${pastaDestino.getName()}`);\n  processarPastaParaHtml(pastaDestino);\n}\n\nfunction processarPastaParaHtml(pasta) {\n  Logger.log(`Processando pasta: ${pasta.getName()}`);\n\n  const arquivos \u003d pasta.getFiles();\n  while (arquivos.hasNext()) {\n    const arquivo \u003d arquivos.next();\n    Logger.log(`Tentando processar arquivo: ${arquivo.getName()}, Tipo: ${arquivo.getMimeType()}`);\n\n    try {\n      if (arquivo.getMimeType() \u003d\u003d\u003d MimeType.GOOGLE_DOCS) {\n        Logger.log(`Convertendo Google Docs para HTML: ${arquivo.getName()}`);\n        converterDocParaHtml(arquivo, pasta);\n      } else {\n        Logger.log(`Arquivo ignorado: ${arquivo.getName()} (tipo: ${arquivo.getMimeType()})`);\n      }\n    } catch (e) {\n      Logger.log(`Erro ao processar arquivo ${arquivo.getName()}: ${e.message}`);\n    }\n  }\n\n  const subpastas \u003d pasta.getFolders();\n  while (subpastas.hasNext()) {\n    const subpasta \u003d subpastas.next();\n    Logger.log(`Processando subpasta: ${subpasta.getName()}`);\n    processarPastaParaHtml(subpasta);\n  }\n}\n\nfunction converterDocParaHtml(arquivo, pastaDestino) {\n    try {\n      const doc \u003d DocumentApp.openById(arquivo.getId());\n      const elementos \u003d doc.getBody().getParagraphs(); // Obtém todos os parágrafos do documento\n  \n      let htmlConteudo \u003d \u0027\u0027;\n      const prefixo \u003d arquivo.getName().split(\u0027_\u0027)[0]; // Obtém o prefixo do arquivo (antes do primeiro \"_\")\n      let capturandoTopicos \u003d false; // Flag para capturar tópicos na lista\n      \n  \n      let dentroPanel \u003d false; // Flag para identificar se estamos dentro de um panel\n      elementos.forEach(paragrafo \u003d\u003e {\n      const texto \u003d paragrafo.getText().trim();\n\n      // Prefixo \u0027VGU\u0027\nif (prefixo \u003d\u003d\u003d \u0027VGU\u0027) {\n    // Processa o texto sem ignorar nenhum conteúdo\n    if (texto.toLowerCase() \u003d\u003d\u003d \"visão geral da unidade\") {\n        htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n    } else if ([\n        \"objetivo de aprendizagem da lição\",\n        \"**objetivo de aprendizagem da lição**\",\n        \"*objetivo de aprendizagem da lição*\",\n        \"###objetivo de aprendizagem da lição\",\n        \"##objetivo de aprendizagem da lição\",\n        \"#objetivo de aprendizagem da lição\"\n    ].includes(texto.toLowerCase())) {\n        htmlConteudo +\u003d `\u003ch2 style\u003d\"color: #0056b3; font-weight: 600;\"\u003eObjetivo de Aprendizagem da Unidade\u003c/h2\u003e\\n`;\n    } else {\n        // Inclui qualquer outro texto como parágrafo\n        htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n    }\n}\n\n\n      // Prefixo \u00276\u0027\n      else if (prefixo \u003d\u003d\u003d \u00276\u0027) {\n          if (/^Questão\\s+\\d+$/i.test(texto)) {\n              // Fecha o panel anterior, se aberto\n              if (dentroPanel) {\n                  htmlConteudo +\u003d `\u003c/div\u003e\\n`;\n                  dentroPanel \u003d false;\n              }\n              // Abre novo panel\n              htmlConteudo +\u003d `\u003cbutton class\u003d\"accordion\"\u003e${texto}\u003c/button\u003e\\n\u003cdiv class\u003d\"panel\"\u003e\\n`;\n              dentroPanel \u003d true;\n          } else if (/^(Exercício de Fixação:?|Exercício)$/i.test(texto)) {\n              if (dentroPanel) {\n                  htmlConteudo +\u003d `\u003c/div\u003e\\n`;\n                  dentroPanel \u003d false;\n              }\n              htmlConteudo +\u003d `\u003ch2 style\u003d\"color: #0056b3; font-weight: 600;\"\u003eExercício de Fixação\u003c/h2\u003e\\n`;\n          } else if (texto.startsWith(\"**\") \u0026\u0026 texto.endsWith(\"**\")) {\n              const textoSemAsteriscos \u003d texto.slice(2, -2).trim();\n              htmlConteudo +\u003d `\u003cp\u003e${textoSemAsteriscos}\u003c/p\u003e\\n`;\n          } else if (/^Comentários da resposta correta$/i.test(texto)) {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;color: #2a7f2a;background: #dde9dd;\"\u003eComentários da resposta correta\u003c/p\u003e\\n`;\n          } else if (/^Comentários de resposta incorreta$/i.test(texto)) {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;color: #b70000;background: #ffe9e9;\"\u003eComentários de resposta incorreta\u003c/p\u003e\\n`;\n          } else if (/^Gabarito/i.test(texto)) {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify; color: #004523;font-size: 13px;\"\u003e${texto}\u003c/p\u003e\\n`;\n          } else {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n          }\n      }\n\n      // Prefixo \u00275\u0027\n      else if (prefixo \u003d\u003d\u003d \u00275\u0027) {\n        if (texto.includes(\"http:\") || texto.includes(\"https:\")) {\n            const link \u003d texto.match(/https?:\\/\\/[^\\s\"\u0027]+/g)?.[0];\n            if (link) {\n                htmlConteudo +\u003d `\u003cdiv style\u003d\"text-align: center; margin-top: 20px;\"\u003e\n                    \u003ca href\u003d\"${link}\" target\u003d\"_blank\" style\u003d\"background-color: #004080; color: #ffffff; padding: 10px 20px; text-decoration: none; border-radius: 5px;\"\u003e\n                        Acessar link\n                    \u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n                \u003c/div\u003e\\n`;\n            }\n        } else if (/leitura\\s+[123456]/i.test(texto)) {\n            const leituraNumero \u003d texto.match(/leitura\\s+([123456])/i)[1];\n            htmlConteudo +\u003d `\u003ch2 style\u003d\"color: #0056b3; font-weight: 600;\"\u003eLeitura ${leituraNumero}\u003c/h2\u003e\\n`;\n        } else {\n            htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n        } \n      }\n\n\n      // Prefixo \u00271\u0027\n      else if (prefixo \u003d\u003d\u003d \u00271\u0027) {\n          if (texto.toLowerCase() \u003d\u003d\u003d \"visão geral da lição\") {\n              return; // Ignora esta frase\n          } else if ([\n              \"objetivo de aprendizagem da lição\",\n              \"**objetivo de aprendizagem da lição**\",\n              \"*objetivo de aprendizagem da lição*\",\n              \"###objetivo de aprendizagem da lição\",\n              \"##objetivo de aprendizagem da lição\",\n              \"#objetivo de aprendizagem da lição\"\n          ].includes(texto.toLowerCase())) {\n              htmlConteudo +\u003d `\u003ch2 style\u003d\"color: #0056b3; font-weight: 600;\"\u003eObjetivo de Aprendizagem da Lição\u003c/h2\u003e\\n`;\n          } else if (/ao (concluir|final|término) (desta lição|esta aula), você (será capaz de|estará apto a):/i.test(texto)) {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n\u003cul\u003e\\n`;\n              capturandoTopicos \u003d true;\n          } else if (/^\\s*unidade\\s+\\d+/i.test(texto)) {\n              return;\n          } else if (capturandoTopicos \u0026\u0026 texto !\u003d\u003d \u0027\u0027) {\n              htmlConteudo +\u003d `\u003cli style\u003d\"margin-bottom: 10px; text-align: justify;\"\u003e${texto}\u003c/li\u003e\\n`;\n          } else if (capturandoTopicos \u0026\u0026 texto \u003d\u003d\u003d \u0027\u0027) {\n              htmlConteudo +\u003d `\u003c/ul\u003e\\n`;\n              capturandoTopicos \u003d false;\n          } else {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n          }\n      }\n\n      // Prefixo \u00273\u0027\n      else if (prefixo \u003d\u003d\u003d \u00273\u0027) {\n          if (texto.includes(\"http:\") || texto.includes(\"https:\")) {\n              const link \u003d texto.match(/https?:[^\\s]+/g)?.[0];\n              if (link) {\n                  htmlConteudo +\u003d `\u003cdiv style\u003d\"text-align: center; margin-top: 20px;\"\u003e\n                      \u003ca href\u003d\"${link}\" target\u003d\"_blank\" style\u003d\"background-color: #004080; color: #ffffff; padding: 10px 20px; text-decoration: none; border-radius: 5px;\"\u003eAcessar link\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n                  \u003c/div\u003e\\n`;\n              }\n          } else if (/leitura\\s+[123]/i.test(texto)) {\n              const leituraNumero \u003d texto.match(/leitura\\s+([123])/i)[1];\n              htmlConteudo +\u003d `\u003ch2 style\u003d\"color: #0056b3; font-weight: 600;\"\u003eLeitura ${leituraNumero}\u003c/h2\u003e\\n`;\n          } else {\n              htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n          }\n      }\n\n      // Padrão para outros prefixos\n      else {\n          htmlConteudo +\u003d `\u003cp style\u003d\"text-align: justify;\"\u003e${texto}\u003c/p\u003e\\n`;\n      }\n  });\n\n\n\n// Fecha o último panel, se ainda estiver aberto\nif (dentroPanel) {\n    htmlConteudo +\u003d `\u003c/div\u003e\\n`;\n    dentroPanel \u003d false;\n}\n\n\n    \n  \n      // Se a lista não foi fechada no final do documento, fecha manualmente\n      if (capturandoTopicos) {\n        htmlConteudo +\u003d `\u003c/ul\u003e\\n`;\n      }\n  \n      // Determina o título e o ícone com base no prefixo\n      let urlIcone \u003d \u0027\u0027, titulo \u003d \u0027Conteúdo\u0027;\n  \n      switch (prefixo) {\n        case \u00271\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/visao%20geral.png\";\n          titulo \u003d \"Visão Geral\";\n          break;\n        case \u00272\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/video.png\";\n          titulo \u003d \"Videoaula\";\n          break;\n        case \u00273\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/Leitura-da-licao.png\";\n          titulo \u003d \"Leitura On-line\";\n          break;\n        case \u00275\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/leituras-externas.png\";\n          titulo \u003d \"Leitura Externa\";\n          break;\n        case \u00276\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/resumo-da-unidade.png\";\n          titulo \u003d \"Resumo\";\n          break;\n        case \u0027VGU\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/visao%20geral.png\";\n          titulo \u003d \"Visão Geral da Unidade\";\n          break;\n        case \u0027REU\u0027:\n          urlIcone \u003d \"https://eadniltonlins.com.br/imagens/pos-graduacao/resumo-da-unidade.png\";\n          titulo \u003d \"Resumo da Unidade\";\n          break;\n        default:\n          urlIcone \u003d \u0027\u0027;\n          titulo \u003d \"Conteúdo\";\n      }\n  \n      // Estrutura HTML com estilo baseado no prefixo\n      const templateHtml \u003d `\n        \u003c!DOCTYPE html\u003e\n        \u003chtml lang\u003d\"pt-BR\"\u003e\n          \u003chead\u003e\n            \u003cmeta charset\u003d\"UTF-8\"\u003e\n            \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e\n            \u003ctitle\u003e${arquivo.getName()}\u003c/title\u003e\n            \u003cstyle\u003e\n              body {\n                \u003clink href\u003d\"https://fonts.googleapis.com/css2?family\u003dPoppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026display\u003dswap\" rel\u003d\"stylesheet\"\u003e\n                font-size: 2.6vh;\n                font-family: \u0027Poppins\u0027, sans-serif;\n                background-color: #ffffff;\n                color: #003366;\n                margin: 0;\n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n              }\n              .main-content {\n                height: 100%;\n                padding: 20px;\n                overflow-y: auto; /* Habilita rolagem vertical */\n              }\n              .accordion {\n                background-color: #e6f0ff;\n                color: #003366;\n                cursor: pointer;\n                padding: 10px 20px;\n                width: 100%;\n                border: none;\n                text-align: left;\n                outline: none;\n                font-size: 16px;\n                transition: 0.4s;\n                margin-bottom: 10px;\n            }\n            .accordion.active,\n            .accordion:hover {\n                background-color: #004080;\n                color: white;\n            }\n            .panel {\n                padding: 0 20px;\n                background-color: white;\n                display: none;\n                overflow: hidden;\n                margin-bottom: 10px;\n                border: 1px solid #004080;\n                border-radius: 5px;\n            }  \n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            \u003cdiv class\u003d\"main-content\"\u003e\n              \u003ch1 class\u003d\"text-center\" id\u003d\"item-1\" style\u003d\"background-color: #00264d; color: #ffffff; padding: 10px; padding-left: 9%; border-radius: 5px; position: relative;\"\u003e\n                \u003cimg src\u003d\"${urlIcone}\" \n                     class\u003d\"img-fluid mb-4\" \n                     style\u003d\"border-radius: 5px; position: absolute; top: 50%; left: 5%; transform: translate(-50%, -50%); max-height: 350px; height: auto; width: auto;\" \n                     alt\u003d\"Ícone\"\u003e\n                ${titulo}\n              \u003c/h1\u003e\n              ${htmlConteudo}\n            \u003c/div\u003e\n             \u003cscript\u003e\n                const accordions \u003d document.querySelectorAll(\u0027.accordion\u0027);\n                accordions.forEach((accordion) \u003d\u003e {\n                    accordion.addEventListener(\u0027click\u0027, function () {\n                    this.classList.toggle(\u0027active\u0027);\n                    const panel \u003d this.nextElementSibling;\n                    panel.style.display \u003d panel.style.display \u003d\u003d\u003d \u0027block\u0027 ? \u0027none\u0027 : \u0027block\u0027;\n                    });\n                });\n                \u003c/script\u003e\n          \u003c/body\u003e\n        \u003c/html\u003e\n      `;\n  \n      // Salva o conteúdo como arquivo HTML\n      const novoArquivoHtml \u003d pastaDestino.createFile(`${arquivo.getName()}.html`, templateHtml, MimeType.HTML);\n      Logger.log(`Arquivo HTML gerado: ${novoArquivoHtml.getName()} na pasta ${pastaDestino.getName()}`);\n    } catch (e) {\n      Logger.log(`Erro ao converter Google Docs ${arquivo.getName()} para HTML: ${e.message}`);\n    }\n  }\n\n\n\n\n//Fim função Converter doc para html\n\nfunction adicionarManifestoNasLicoes() {\n  const pastaDestinoId \u003d \"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\"; // Substitua pelo ID da pasta de destino\n  const pastaDestino \u003d DriveApp.getFolderById(pastaDestinoId);\n\n  Logger.log(`Adicionando arquivo manifesto nas pastas de lições em: ${pastaDestino.getName()}`);\n  adicionarManifestoLicoes(pastaDestino);\n}\n\nfunction adicionarManifestoLicoes(pasta) {\n  const subpastas \u003d pasta.getFolders();\n\n  while (subpastas.hasNext()) {\n    const subpasta \u003d subpastas.next();\n    const nomeSubpasta \u003d subpasta.getName();\n\n    if (nomeSubpasta.includes(\"1.10- Videoaulas\")) {\n      Logger.log(`Ignorando subpasta: ${nomeSubpasta}`);\n      continue;\n    }\n\n    if (nomeSubpasta.includes(\"Lição\")) {\n      Logger.log(`Criando manifesto na subpasta: ${nomeSubpasta}`);\n      criarArquivoManifesto(subpasta);\n    } else {\n      Logger.log(`Ignorando subpasta: ${nomeSubpasta}`);\n    }\n\n    // Processa subpastas recursivamente\n    adicionarManifestoLicoes(subpasta);\n  }\n}\n\nfunction criarArquivoManifesto(pasta) {\n  const nomeLicao \u003d pasta.getName();\n  const arquivosHtml \u003d [];\n\n  Logger.log(`Processando arquivos na pasta: ${nomeLicao}`);\n\n  const arquivos \u003d pasta.getFiles();\n  while (arquivos.hasNext()) {\n    const arquivo \u003d arquivos.next();\n    const nomeArquivo \u003d arquivo.getName();\n\n    try {\n      // Inclui apenas arquivos na ordem específica\n      if (\n        nomeArquivo.startsWith(\"1_VGL\") ||\n        // nomeArquivo.startsWith(\"2_VD\") ||\n        nomeArquivo.startsWith(\"2_LTL\") ||\n        nomeArquivo.startsWith(\"3_MPM\") ||\n        nomeArquivo.startsWith(\"4_LTE\") ||\n        nomeArquivo.startsWith(\"5_VFC\")\n      ) {\n        arquivosHtml.push({\n          title: obterTitulo(nomeArquivo), // Obtém título baseado na sigla\n          href: nomeArquivo, // Nome do arquivo\n        });\n        Logger.log(`Arquivo HTML incluído: ${nomeArquivo}`);\n      } else {\n        Logger.log(`Arquivo ignorado: ${nomeArquivo}`);\n      }\n    } catch (error) {\n      Logger.log(`Erro ao processar arquivo ${nomeArquivo || \"sem nome\"}: ${error.message}`);\n    }\n  }\n\n  if (arquivosHtml.length \u003d\u003d\u003d 0) {\n    Logger.log(`Nenhum arquivo válido encontrado na pasta: ${nomeLicao}`);\n    return;\n  }\n\n  const manifestoXml \u003d gerarXmlLicao(nomeLicao, arquivosHtml);\n\n  try {\n    pasta.createFile(\"imsmanifest.xml\", manifestoXml, MimeType.PLAIN_TEXT);\n    Logger.log(`Manifesto criado com sucesso na pasta: ${nomeLicao}`);\n  } catch (e) {\n    Logger.log(`Erro ao criar manifesto na pasta ${nomeLicao}: ${e.message}`);\n  }\n}\n\nfunction obterTitulo(nomeArquivo) {\n  if (nomeArquivo.startsWith(\"1_VGL\")) return \"Visão Geral da Lição\";\n  // if (nomeArquivo.startsWith(\"2_VD\")) return \"Videoaula\";\n  if (nomeArquivo.startsWith(\"2_LTL\")) return \"Leitura On-line\";\n  if (nomeArquivo.startsWith(\"3_MPM\")) return \"Mapa Mental\";\n  if (nomeArquivo.startsWith(\"4_LTE\")) return \"Leitura Externa\";\n  if (nomeArquivo.startsWith(\"5_VFC\")) return \"Resumo e Autoavaliação\";\n  return \"Título Desconhecido\";\n}\n\nfunction gerarXmlLicao(nomeLicao, arquivosHtml) {\n  const identificadorLicao \u003d nomeLicao.replace(/\\s+/g, \"_\");\n\n  // Mapeamento das siglas para os títulos\n  const siglasTitulos \u003d {\n    VGL: \"Visão Geral da Lição\",\n    // Removemos VD para não exibir vídeo aula\n    LTL: \"Leitura On-line\",\n    MPM: \"Mapa Mental\",\n    LTE: \"Leitura Externa\",\n    VFC: \"Resumo e Autoavaliação\",\n  };\n\n  // Ordem desejada, agora sem \"VD\"\n  const ordemDesejada \u003d [\"VGL\", \"LTL\", \"MPM\", \"LTE\", \"VFC\"];\n\n  // Ordenar os arquivos com base na ordem desejada\n  const arquivosOrdenados \u003d ordemDesejada\n    .map(sigla \u003d\u003e arquivosHtml.find(arquivo \u003d\u003e arquivo.href.includes(`_${sigla}_`)))\n    .filter(Boolean); // Remove entradas não encontradas\n\n  let itensXml \u003d \"\";\n  let recursosXml \u003d \"\";\n\n  arquivosOrdenados.forEach((arquivo, index) \u003d\u003e {\n    const siglaMatch \u003d arquivo.href.match(/_(VGL|LTL|MPM|LTE|VFC)_/);\n    const sigla \u003d siglaMatch ? siglaMatch[1] : null;\n    const titulo \u003d sigla \u0026\u0026 siglasTitulos[sigla] ? siglasTitulos[sigla] : \"Título Desconhecido\";\n\n    const identifier \u003d `item${index + 1}`;\n    const resourceId \u003d `res${index + 1}`;\n    itensXml +\u003d `\n      \u003citem identifier\u003d\"${identifier}\" identifierref\u003d\"${resourceId}\"\u003e\n        \u003ctitle\u003e${titulo}\u003c/title\u003e\n      \u003c/item\u003e\n    `;\n    recursosXml +\u003d `\n      \u003cresource identifier\u003d\"${resourceId}\" type\u003d\"webcontent\" href\u003d\"${arquivo.href}\"\u003e\n        \u003cfile href\u003d\"${arquivo.href}\" /\u003e\n      \u003c/resource\u003e\n    `;\n  });\n\n  return `\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003cmanifest identifier\u003d\"${identificadorLicao}\" version\u003d\"1.2\"\u003e\n  \u003cmetadata\u003e\n    \u003cschema\u003eADL SCORM\u003c/schema\u003e\n    \u003cschemaversion\u003e1.2\u003c/schemaversion\u003e\n  \u003c/metadata\u003e\n  \u003corganizations default\u003d\"${identificadorLicao}\"\u003e\n    \u003corganization identifier\u003d\"${identificadorLicao}\"\u003e\n      \u003ctitle\u003e${nomeLicao}\u003c/title\u003e\n      ${itensXml}\n    \u003c/organization\u003e\n  \u003c/organizations\u003e\n  \u003cresources\u003e\n    ${recursosXml}\n  \u003c/resources\u003e\n\u003c/manifest\u003e\n  `.trim();\n}\n\n\n\n\nfunction criarArquivoManifesto(pasta) {\n  const nomeLicao \u003d pasta.getName();\n  const arquivosHtml \u003d [];\n\n  Logger.log(`Processando arquivos na pasta: ${nomeLicao}`);\n\n  const arquivos \u003d pasta.getFiles();\n  while (arquivos.hasNext()) {\n    const arquivo \u003d arquivos.next();\n\n    try {\n      // Verifica se o arquivo é HTML\n      if (arquivo.getMimeType() \u003d\u003d\u003d MimeType.HTML || arquivo.getName().endsWith(\".html\")) {\n        arquivosHtml.push({\n          title: arquivo.getName().replace(\".html\", \"\"), // Nome do arquivo sem extensão\n          href: arquivo.getName(), // Nome do arquivo\n        });\n        Logger.log(`Arquivo HTML incluído: ${arquivo.getName()}`);\n      } else {\n        Logger.log(`Arquivo ignorado: ${arquivo.getName()} (tipo: ${arquivo.getMimeType()})`);\n      }\n    } catch (error) {\n      Logger.log(`Erro ao processar arquivo ${arquivo.getName() || \"sem nome\"}: ${error.message}`);\n    }\n  }\n\n  // Verifica se encontrou arquivos HTML antes de criar o manifesto\n  if (arquivosHtml.length \u003d\u003d\u003d 0) {\n    Logger.log(`Nenhum arquivo HTML encontrado na pasta: ${nomeLicao}`);\n    return;\n  }\n\n  // Gera o XML do manifesto\n  const manifestoXml \u003d gerarXmlLicao(nomeLicao, arquivosHtml);\n\n  try {\n    // Cria o arquivo imsmanifest.xml na pasta com tipo MIME explícito\n    pasta.createFile(\"imsmanifest.xml\", manifestoXml, MimeType.PLAIN_TEXT);\n    Logger.log(`Manifesto criado com sucesso na pasta: ${nomeLicao}`);\n  } catch (e) {\n    Logger.log(`Erro ao criar manifesto na pasta ${nomeLicao}: ${e.message}`);\n  }\n}\n\n\n\nfunction gerarArquivosZipParaTodasAsUnidades() {\n  const pastaPrincipalId \u003d \"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\"; // Substitua pelo ID da pasta principal\n\n  try {\n    const pastaPrincipal \u003d DriveApp.getFolderById(pastaPrincipalId);\n    if (!pastaPrincipal) {\n      Logger.log(`Erro: A pasta principal com o ID ${pastaPrincipalId} não foi encontrada.`);\n      return;\n    }\n\n    Logger.log(`Pasta principal encontrada: ${pastaPrincipal.getName()}, ID: ${pastaPrincipal.getId()}`);\n\n    const subpastasUnidades \u003d pastaPrincipal.getFolders();\n\n    while (subpastasUnidades.hasNext()) {\n      const unidade \u003d subpastasUnidades.next();\n      const nomeUnidade \u003d unidade.getName();\n\n      if (nomeUnidade \u003d\u003d\u003d \"1.7 Avaliação Final\") {\n        Logger.log(`Processando pasta de Avaliação Final: ${nomeUnidade}`);\n        processarAvaliacaoFinal(unidade);\n        continue; // Pula para a próxima unidade\n      }\n\n      Logger.log(`Processando unidade: ${nomeUnidade}`);\n\n      // Criar ou verificar a pasta SCORM dentro da unidade\n      let pastaScorm \u003d null;\n      const pastasScormExistente \u003d unidade.getFoldersByName(`SCORM_${nomeUnidade}`);\n      if (pastasScormExistente.hasNext()) {\n        pastaScorm \u003d pastasScormExistente.next();\n        Logger.log(`Pasta SCORM encontrada: ${pastaScorm.getName()}, ID: ${pastaScorm.getId()}`);\n      } else {\n        pastaScorm \u003d unidade.createFolder(`SCORM_${nomeUnidade}`);\n        Logger.log(`Pasta SCORM criada: ${pastaScorm.getName()}, ID: ${pastaScorm.getId()}`);\n      }\n\n      // Processar subpastas dentro da unidade (ex.: Lição 1, Lição 2, ...)\n      criarZipPorLicao(unidade, pastaScorm);\n    }\n  } catch (e) {\n    Logger.log(`Erro ao processar todas as unidades: ${e.message}`);\n  }\n}\n\nfunction processarAvaliacaoFinal(pastaAvaliacaoFinal) {\n  try {\n    const xmlAvaliacaoFinal \u003d `\n\u003cmanifest identifier\u003d\"avaliacao_final\" version\u003d\"1.2\"\u003e\n  \u003cmetadata\u003e\n    \u003cschema\u003eADL SCORM\u003c/schema\u003e\n    \u003cschemaversion\u003e1.2\u003c/schemaversion\u003e\n    \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n  \u003c/metadata\u003e\n  \u003corganizations default\u003d\"org_avaliacao_final\"\u003e\n    \u003corganization identifier\u003d\"org_avaliacao_final\"\u003e\n      \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n      \u003citem identifier\u003d\"item_avaliacao_final\" identifierref\u003d\"res_avaliacao_final\"\u003e\n        \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n      \u003c/item\u003e\n    \u003c/organization\u003e\n  \u003c/organizations\u003e\n  \u003cresources\u003e\n    \u003cresource identifier\u003d\"res_avaliacao_final\" type\u003d\"webcontent\" href\u003d\"avaliacao_final.html\"\u003e\n      \u003cfile href\u003d\"avaliacao_final.html\"/\u003e\n    \u003c/resource\u003e\n  \u003c/resources\u003e\n\u003c/manifest\u003e`;\n    \n    const xmlBlob \u003d Utilities.newBlob(xmlAvaliacaoFinal, MimeType.XML, \"imsmanifest.xml\");\n    pastaAvaliacaoFinal.createFile(xmlBlob);\n    Logger.log(`Arquivo XML gerado na pasta Avaliação Final: imsmanifest.xml`);\n\n    // Compactar os arquivos HTML e XML\n    const arquivos \u003d pastaAvaliacaoFinal.getFiles();\n    const listaBlobs \u003d [];\n\n    while (arquivos.hasNext()) {\n      const arquivo \u003d arquivos.next();\n      if (arquivo.getName().endsWith(\".html\") || arquivo.getName() \u003d\u003d\u003d \"imsmanifest.xml\") {\n        listaBlobs.push(arquivo.getBlob());\n        Logger.log(`Adicionado arquivo ao ZIP: ${arquivo.getName()}`);\n      }\n    }\n\n    if (listaBlobs.length \u003e 0) {\n      const zipBlob \u003d Utilities.zip(listaBlobs, `scorm_Avaliacao_Final.zip`);\n      pastaAvaliacaoFinal.createFile(zipBlob);\n      Logger.log(`Arquivo ZIP criado para Avaliação Final: scorm_Avaliacao_Final.zip`);\n    } else {\n      Logger.log(\"Nenhum arquivo para compactar na pasta Avaliação Final.\");\n    }\n  } catch (e) {\n    Logger.log(`Erro ao processar a pasta Avaliação Final: ${e.message}`);\n  }\n}\n\n\nfunction criarZipPorLicao(pastaUnidade, pastaDestino) {\n  try {\n    const subpastasLicoes \u003d pastaUnidade.getFolders();\n    let encontrouLicoes \u003d false;\n\n    while (subpastasLicoes.hasNext()) {\n      const licao \u003d subpastasLicoes.next();\n      const nomeLicao \u003d licao.getName();\n      Logger.log(`Encontrada subpasta: ${nomeLicao}`);\n\n      // Verifica se a subpasta começa ou contém \"Lição\"\n      if (nomeLicao.startsWith(\"Lição\") || nomeLicao.includes(\"Lição\")) {\n        encontrouLicoes \u003d true;\n        Logger.log(`Processando lição: ${nomeLicao}`);\n\n        const arquivos \u003d licao.getFiles();\n        const listaBlobs \u003d [];\n\n        // Adicionar apenas arquivos HTML e XML ao ZIP\n        while (arquivos.hasNext()) {\n          const arquivo \u003d arquivos.next();\n          if (arquivo.getName().endsWith(\".html\") || arquivo.getName().endsWith(\".xml\")) {\n            listaBlobs.push(arquivo.getBlob());\n            Logger.log(`Adicionado arquivo ao ZIP: ${arquivo.getName()}`);\n          } else {\n            Logger.log(`Arquivo ignorado (não é HTML ou XML): ${arquivo.getName()}`);\n          }\n        }\n\n        // Criar o ZIP se houver arquivos\n        if (listaBlobs.length \u003e 0) {\n          const zipBlob \u003d Utilities.zip(listaBlobs, `scorm_${nomeLicao}.zip`);\n          pastaDestino.createFile(zipBlob);\n          Logger.log(`ZIP da lição criado: scorm_${nomeLicao}.zip`);\n        } else {\n          Logger.log(`Lição \"${nomeLicao}\" não contém arquivos HTML ou XML. Pulando...`);\n        }\n      }\n    }\n\n    if (!encontrouLicoes) {\n      Logger.log(\"Nenhuma subpasta contendo \u0027Lição\u0027 foi encontrada.\");\n    }\n  } catch (e) {\n    Logger.log(`Erro ao criar arquivos ZIP para as lições: ${e.message}`);\n  }\n}\n\n\nfunction gerarXmlAvaliacaoFinal(pastaAvaliacaoFinal) {\n  try {\n    const xmlAvaliacaoFinal \u003d `\n\u003cmanifest identifier\u003d\"avaliacao_final\" version\u003d\"1.2\"\u003e\n  \u003cmetadata\u003e\n    \u003cschema\u003eADL SCORM\u003c/schema\u003e\n    \u003cschemaversion\u003e1.2\u003c/schemaversion\u003e\n    \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n  \u003c/metadata\u003e\n  \u003corganizations default\u003d\"org_avaliacao_final\"\u003e\n    \u003corganization identifier\u003d\"org_avaliacao_final\"\u003e\n      \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n      \u003citem identifier\u003d\"item_avaliacao_final\" identifierref\u003d\"res_avaliacao_final\"\u003e\n        \u003ctitle\u003eAvaliação Final\u003c/title\u003e\n      \u003c/item\u003e\n    \u003c/organization\u003e\n  \u003c/organizations\u003e\n  \u003cresources\u003e\n    \u003cresource identifier\u003d\"res_avaliacao_final\" type\u003d\"webcontent\" href\u003d\"avaliacao_final.html\"\u003e\n      \u003cfile href\u003d\"avaliacao_final.html\"/\u003e\n    \u003c/resource\u003e\n  \u003c/resources\u003e\n\u003c/manifest\u003e`;\n    \n    const xmlBlob \u003d Utilities.newBlob(xmlAvaliacaoFinal, MimeType.XML, \"imsmanifest.xml\");\n    pastaAvaliacaoFinal.createFile(xmlBlob);\n    Logger.log(`Arquivo XML gerado na pasta Avaliação Final: imsmanifest.xml`);\n  } catch (e) {\n    Logger.log(`Erro ao gerar XML para Avaliação Final: ${e.message}`);\n  }\n}\n\nfunction executarCriacaoPastaScorm() {\n  criarPastaScormComNomePersonalizado(\"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\");\n}\n\nfunction criarPastaScormComNomePersonalizado(pastaRaizId) {\n  try {\n    // Obtém a pasta raiz pelo ID\n    const pastaRaiz \u003d DriveApp.getFolderById(pastaRaizId);\n    if (!pastaRaiz) {\n      Logger.log(\"Erro: Pasta raiz não encontrada.\");\n      return;\n    }\n\n    const nomeNovaPasta \u003d `SCORM_${pastaRaiz.getName()}`;\n\n    // Verifica se a pasta já existe para evitar duplicados\n    const pastasExistentes \u003d pastaRaiz.getFoldersByName(nomeNovaPasta);\n    if (pastasExistentes.hasNext()) {\n      Logger.log(`A pasta ${nomeNovaPasta} já existe.`);\n      return;\n    }\n\n    // Cria uma nova pasta dentro da pasta raiz\n    const novaPasta \u003d pastaRaiz.createFolder(nomeNovaPasta);\n    Logger.log(`Nova pasta criada: ${novaPasta.getName()} na pasta raiz: ${pastaRaiz.getName()}`);\n  } catch (erro) {\n    Logger.log(`Erro ao criar a pasta SCORM: ${erro.message}`);\n  }\n}\n\ncopiarPastasScormParaNovaPasta(\"12o0qkoceUYPR94QjLunoV8g1PktE2Irc\");\n\nfunction copiarPastasScormParaNovaPasta(pastaRaizId) {\n  try {\n    // Obtém a pasta raiz pelo ID\n    const pastaRaiz \u003d DriveApp.getFolderById(pastaRaizId);\n    const nomeNovaPasta \u003d `SCORM_${pastaRaiz.getName()}`;\n\n    // Cria a nova pasta com o nome personalizado\n    const novaPasta \u003d pastaRaiz.createFolder(nomeNovaPasta);\n    Logger.log(`Nova pasta criada: ${novaPasta.getName()} na pasta raiz: ${pastaRaiz.getName()}`);\n\n    // Função recursiva para encontrar e copiar todas as pastas SCORM\n    function procurarECopiarPastasScorm(pastaAtual, pastaDestino) {\n      const subpastas \u003d pastaAtual.getFolders();\n\n      while (subpastas.hasNext()) {\n        const subpasta \u003d subpastas.next();\n        Logger.log(`Verificando subpasta: ${subpasta.getName()}`);\n\n        if (subpasta.getName().toLowerCase().startsWith(\"scorm\")) {\n          // Copiar a pasta SCORM para o destino\n          const novaSubpasta \u003d pastaDestino.createFolder(subpasta.getName());\n          const arquivos \u003d subpasta.getFiles();\n          Logger.log(`Copiando arquivos da pasta SCORM: ${subpasta.getName()}`);\n\n          while (arquivos.hasNext()) {\n            const arquivo \u003d arquivos.next();\n            novaSubpasta.createFile(arquivo);\n            Logger.log(`Arquivo copiado: ${arquivo.getName()} para ${novaSubpasta.getName()}`);\n          }\n        } else {\n          // Continua verificando subpastas recursivamente\n          procurarECopiarPastasScorm(subpasta, pastaDestino);\n        }\n      }\n    }\n\n    // Inicia a busca e cópia\n    procurarECopiarPastasScorm(pastaRaiz, novaPasta);\n    Logger.log(\"Processo de cópia concluído com sucesso!\");\n  } catch (erro) {\n    Logger.log(`Erro ao copiar pastas SCORM: ${erro.message}`);\n  }\n}\n"}]}